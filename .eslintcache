[{"C:\\Users\\Dreambuild\\Projects\\clock-puzzle\\src\\index.js":"1","C:\\Users\\Dreambuild\\Projects\\clock-puzzle\\src\\reportWebVitals.js":"2","C:\\Users\\Dreambuild\\Projects\\clock-puzzle\\src\\App.js":"3","C:\\Users\\Dreambuild\\Projects\\clock-puzzle\\src\\PlayablePuzzle.js":"4"},{"size":519,"mtime":1609520655095,"results":"5","hashOfConfig":"6"},{"size":375,"mtime":1609520655096,"results":"7","hashOfConfig":"6"},{"size":5061,"mtime":1609644664452,"results":"8","hashOfConfig":"6"},{"size":5253,"mtime":1609526652878,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"wlu0d5",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\Dreambuild\\Projects\\clock-puzzle\\src\\index.js",[],["20","21"],"C:\\Users\\Dreambuild\\Projects\\clock-puzzle\\src\\reportWebVitals.js",[],"C:\\Users\\Dreambuild\\Projects\\clock-puzzle\\src\\App.js",[],"C:\\Users\\Dreambuild\\Projects\\clock-puzzle\\src\\PlayablePuzzle.js",["22","23"],"import { React, useState, useEffect } from \"react\";\r\n\r\nfunction PlayablePuzzle(props) {\r\n  const [coords, setCoords] = useState([]);\r\n  const [selectedArr, setSelectedArr] = useState([]);\r\n  const [relationshipMap, setRelationshipMap] = useState([]);\r\n\r\n  const [lastSelected, setLastSelected] = useState();\r\n  const [selectedOrder, setSelectedOrder] = useState([]);\r\n  const [canBeSelected, setCanBeSelected] = useState([]);\r\n\r\n  useEffect(() => {\r\n    lastSelected !== undefined && relationshipMap !== undefined\r\n      ? setCanBeSelected([...relationshipMap[lastSelected]])\r\n      : setCanBeSelected([]);\r\n    if (\r\n      lastSelected !== undefined &&\r\n      lastSelected !== selectedOrder[selectedOrder.length - 1]\r\n    ) {\r\n      let newList = [...selectedOrder];\r\n      newList.push(lastSelected);\r\n      setSelectedOrder(newList);\r\n    }\r\n  }, [lastSelected]);\r\n\r\n  function mod(n, m) {\r\n    return ((n % m) + m) % m;\r\n  }\r\n\r\n  let setup = () => {\r\n    var radius = 300; // radius of the circle\r\n    var fields = [...props.inputArray];\r\n    var coordArray = [];\r\n    var angle = (3 / 2 * Math.PI); // 270 degree angle to start at top\r\n    var step = (2 * Math.PI) / fields.length;\r\n\r\n    fields.forEach(() => {\r\n      var x = Math.round(radius * Math.cos(angle));\r\n      var y = Math.round(radius * Math.sin(angle));\r\n      angle += step;\r\n      coordArray.push([x, y]);\r\n    });\r\n\r\n    setCoords(coordArray);\r\n    let newArr = coordArray.map(() => {\r\n      return 0;\r\n    });\r\n\r\n    let newRelationshipMap = [];\r\n    props.inputArray.forEach((val, index) => {\r\n      let upStepIndex = mod(\r\n        index + +props.inputArray[index],\r\n        props.inputArray.length\r\n      );\r\n      let downStepIndex = mod(\r\n        index - props.inputArray[index],\r\n        props.inputArray.length\r\n      );\r\n      let relationShipTuple = [downStepIndex, upStepIndex];\r\n      newRelationshipMap.push(relationShipTuple);\r\n    });\r\n    setRelationshipMap(newRelationshipMap);\r\n\r\n    setSelectedArr(newArr);\r\n    setLastSelected(undefined);\r\n    setSelectedOrder([]);\r\n  };\r\n\r\n  if (coords.length > 1) {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              setup();\r\n            }}\r\n          >\r\n            Seetup\r\n          </button>\r\n          {selectedOrder.includes(canBeSelected[0]) &&\r\n          selectedOrder.includes(canBeSelected[1]) &&\r\n          new Set(selectedArr).has(0) ? (\r\n            <div>This is a dead end, try again</div>\r\n          ) : (\r\n            <div>\r\n              <div>{\"Selected Order\" + JSON.stringify(selectedOrder)}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {coords.map((pos, tileIndex) => {\r\n          return (\r\n            <div\r\n              style={{\r\n                position: \"absolute\",\r\n                marginLeft: 500 + pos[0],\r\n                marginTop: 300 + pos[1],\r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  width: 50,\r\n                  height: 50,\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                  border:\r\n                    lastSelected !== undefined && lastSelected == tileIndex\r\n                      ? \"2px solid blue\"\r\n                      : selectedArr[tileIndex] === 1\r\n                      ? \"2px solid red\"\r\n                      : (canBeSelected[0] !== undefined &&\r\n                          canBeSelected[0] === tileIndex) ||\r\n                        (canBeSelected[1] !== undefined &&\r\n                          canBeSelected[1] === tileIndex)\r\n                      ? \"2px solid yellow\"\r\n                      : \"2px solid black\",\r\n                  fontSize: 35,\r\n                }}\r\n                onClick={() => {\r\n                  if (\r\n                    !selectedArr[tileIndex] &&\r\n                    (canBeSelected.length === 0 ||\r\n                      (canBeSelected[0] !== undefined &&\r\n                        canBeSelected[0] === tileIndex) ||\r\n                      (canBeSelected[1] !== undefined &&\r\n                        canBeSelected[1] === tileIndex))\r\n                  ) {\r\n                    setLastSelected(tileIndex);\r\n                    let newArr = [...selectedArr];\r\n                    newArr[tileIndex] = 1;\r\n                    setSelectedArr(newArr);\r\n                  } else {\r\n                  }\r\n                }}\r\n              >\r\n                {props.inputArray[tileIndex]\r\n                  ? props.inputArray[tileIndex]\r\n                  : \"EROROR\"}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        <div\r\n          className=\"App-logo\"\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: 500 - 200,\r\n            marginTop: 300,\r\n            fontSize: 50,\r\n            color: \"red\",\r\n          }}\r\n        >\r\n          {new Set(selectedArr).has(0) ? \"\" : \"CONGRATULATIONS\"}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              setup();\r\n            }}\r\n          >\r\n            Seetup\r\n          </button>\r\n        </div>\r\n        asd\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayablePuzzle;\r\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":24,"column":6,"nodeType":"30","endLine":24,"endColumn":20,"suggestions":"31"},{"ruleId":"32","severity":1,"message":"33","line":106,"column":64,"nodeType":"34","messageId":"35","endLine":106,"endColumn":66},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'relationshipMap' and 'selectedOrder'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setCanBeSelected' needs the current value of 'relationshipMap'.","ArrayExpression",["38"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"39","fix":"40"},"Update the dependencies array to be: [lastSelected, relationshipMap, selectedOrder]",{"range":"41","text":"42"},[850,864],"[lastSelected, relationshipMap, selectedOrder]"]